import random

# Define the Tic-Tac-Toe board
board = [" " for _ in range(9)]

# Define the winning combinations
winning_combinations = [(0, 1, 2), (3, 4, 5), (6, 7, 8),
                        (0, 3, 6), (1, 4, 7), (2, 5, 8),
                        (0, 4, 8), (2, 4, 6)]

# Function to print the Tic-Tac-Toe board
def print_board(board):
    print("-------------")
    for i in range(3):
        print("|", board[i * 3], "|", board[i * 3 + 1], "|", board[i * 3 + 2], "|")
        print("-------------")

# Function to check if the board is full
def is_full(board):
    return " " not in board

# Function to check if the game is over
def is_game_over(board):
    for a, b, c in winning_combinations:
        if board[a] == board[b] == board[c] and board[a] != " ":
            return True
    return is_full(board)

# Function to evaluate the board for the AI
def evaluate(board):
    for a, b, c in winning_combinations:
        if board[a] == board[b] == board[c] and board[a] == "O":
            return 1
        elif board[a] == board[b] == board[c] and board[a] == "X":
            return -1
    return 0

# Minimax algorithm with Alpha-Beta Pruning
def minimax(board, depth, is_maximizing, alpha, beta):
    if is_game_over(board):
        return evaluate(board)

    if is_maximizing:
        max_eval = -float("inf")
        for i in range(9):
            if board[i] == " ":
                board[i] = "O"
                eval = minimax(board, depth + 1, False, alpha, beta)
                board[i] = " "
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
        return max_eval
    else:
        min_eval = float("inf")
        for i in range(9):
            if board[i] == " ":
                board[i] = "X"
                eval = minimax(board, depth + 1, True, alpha, beta)
                board[i] = " "
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
        return min_eval

# Find the best move for the AI
def best_move(board):
    best_eval = -float("inf")
    best_move = -1
    alpha = -float("inf")
    beta = float("inf")

    for i in range(9):
        if board[i] == " ":
            board[i] = "O"
            eval = minimax(board, 0, False, alpha, beta)
            board[i] = " "
            if eval > best_eval:
                best_eval = eval
                best_move = i

    return best_move

# Main game loop
while not is_game_over(board):
    print_board(board)
    player_move = int(input("Enter your move (0-8): "))

    if board[player_move] == " ":
        board[player_move] = "X"
    else:
        print("Invalid move. Try again.")
        continue

    if is_game_over(board):
        break

    ai_move = best_move(board)
    board[ai_move] = "O"

print_board(board)

if evaluate(board) == 1:
    print("AI wins!")
elif evaluate(board) == -1:
    print("You win!")
else:
    print("It's a draw!")
